// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Kullanıcı modeli
model User {
  id                  String    @id @default(uuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                String    @default("user")
  isVerified          Boolean   @default(false)
  verificationToken   String?
  verificationExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]

  @@map("users")
}

// Gönderi modeli
model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tag         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments Comment[]
  likes    Like[]

  @@map("posts")
}

// Yorum modeli
model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes Like[]

  @@map("comments")
}

// Beğeni modeli
model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId, commentId])
  @@map("likes")
}
